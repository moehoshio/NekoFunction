name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # Windows builds
          - {
              name: "Windows MSVC 2022 Debug",
              os: windows-latest,
              cc: "cl",
              cxx: "cl",
              build_type: "Debug",
              generators: "Visual Studio 17 2022"
            }
          - {
              name: "Windows MSVC 2022 Release",
              os: windows-latest,
              cc: "cl",
              cxx: "cl",
              build_type: "Release",
              generators: "Visual Studio 17 2022"
            }
          
          # Linux builds
          - {
              name: "Ubuntu GCC Debug",
              os: ubuntu-latest,
              cc: "gcc",
              cxx: "g++",
              build_type: "Debug",
              generators: "Unix Makefiles"
            }
          - {
              name: "Ubuntu GCC Release",
              os: ubuntu-latest,
              cc: "gcc",
              cxx: "g++",
              build_type: "Release",
              generators: "Unix Makefiles"
            }

          # macOS builds
          - {
              name: "macOS Clang Debug",
              os: macos-latest,
              cc: "clang",
              cxx: "clang++",
              build_type: "Debug",
              generators: "Unix Makefiles"
            }
          - {
              name: "macOS Clang Release",
              os: macos-latest,
              cc: "clang",
              cxx: "clang++",
              build_type: "Release",
              generators: "Unix Makefiles"
            }

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies (Ubuntu)
      if: startsWith(matrix.config.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build software-properties-common libssl-dev zlib1g-dev libbz2-dev liblzma-dev libzstd-dev
        
        # Install GCC-13 from toolchain PPA
        if [[ "${{ matrix.config.cxx }}" == g++-13 ]]; then
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y gcc-13 g++-13
        # Install Clang-16 from LLVM APT repository
        elif [[ "${{ matrix.config.cxx }}" == clang++-16 ]]; then
          wget -O - https://apt.llvm.org/llvm.sh | sudo bash -s -- 16
          sudo apt-get install -y clang-16 clang++-16
        # Install other Clang versions
        elif [[ "${{ matrix.config.cxx }}" == clang* ]]; then
          sudo apt-get install -y ${{ matrix.config.cxx }}
        fi
        
        # Build and install minizip-ng from source
        echo "=== Installing minizip-ng ==="
        cd /tmp
        git clone --depth 1 --branch 4.0.7 https://github.com/zlib-ng/minizip-ng.git
        cd minizip-ng
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DMZ_COMPAT=OFF -DMZ_ZLIB=ON -DMZ_BZIP2=ON -DMZ_LZMA=ON -DMZ_ZSTD=ON -DMZ_OPENSSL=ON
        cmake --build . --config Release
        sudo cmake --install .
        cd $GITHUB_WORKSPACE

    - name: Check compiler versions (Debug)
      if: startsWith(matrix.config.os, 'ubuntu')
      run: |
        echo "=== Compiler Information ==="
        ${{ matrix.config.cxx }} --version
        echo "=== CMake Information ==="
        cmake --version
        echo "=== Standard Library Check ==="
        echo '#include <version>' | ${{ matrix.config.cxx }} -std=c++20 -x c++ -E - 2>/dev/null && echo "C++20 headers available" || echo "C++20 headers missing"
        echo '#include <source_location>' | ${{ matrix.config.cxx }} -std=c++20 -x c++ -E - 2>/dev/null && echo "source_location available" || echo "source_location missing"
        echo '#include <format>' | ${{ matrix.config.cxx }} -std=c++20 -x c++ -E - 2>/dev/null && echo "format available" || echo "format missing"

    - name: Install dependencies (macOS)
      if: startsWith(matrix.config.os, 'macos')
      run: |
        brew install cmake ninja openssl zlib xz zstd
        
        # Build and install minizip-ng from source
        echo "=== Installing minizip-ng ==="
        cd /tmp
        git clone --depth 1 --branch 4.0.7 https://github.com/zlib-ng/minizip-ng.git
        cd minizip-ng
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DMZ_COMPAT=OFF -DMZ_ZLIB=ON -DMZ_BZIP2=ON -DMZ_LZMA=ON -DMZ_ZSTD=ON -DMZ_OPENSSL=ON -DCMAKE_PREFIX_PATH="$(brew --prefix openssl)"
        cmake --build . --config Release
        sudo cmake --install .
        cd $GITHUB_WORKSPACE

    - name: Install dependencies (Windows)
      if: startsWith(matrix.config.os, 'windows')
      run: |
        choco install openssl --version=3.1.1
        if ("${{ matrix.config.generators }}" -eq "Ninja") {
          choco install ninja
          # Setup Clang
          choco install llvm
        }
      shell: powershell

    - name: Set up MSVC environment (Windows)
      if: startsWith(matrix.config.os, 'windows') && matrix.config.cc == 'cl'
      uses: ilammy/msvc-dev-cmd@v1.13.0
    
    - name: Check OpenSSL installation (Windows)
      if: startsWith(matrix.config.os, 'windows')
      run: |
        Write-Host "=== Checking OpenSSL installation ==="
        if (Test-Path "C:\Program Files\OpenSSL") {
          Write-Host "Found: C:\Program Files\OpenSSL"
          Get-ChildItem "C:\Program Files\OpenSSL" -Recurse -Depth 1 | Select-Object FullName
        }
        if (Test-Path "C:\Program Files\OpenSSL-Win64") {
          Write-Host "Found: C:\Program Files\OpenSSL-Win64"
          Get-ChildItem "C:\Program Files\OpenSSL-Win64" -Recurse -Depth 1 | Select-Object FullName
        }
        if (Test-Path "C:\Progra~1\OpenSSL") {
          Write-Host "Found: C:\Progra~1\OpenSSL"
        }
      shell: powershell
    
    - name: Build and install zlib-ng (Windows)
      if: startsWith(matrix.config.os, 'windows')
      run: |
        Write-Host "=== Building zlib-ng ==="
        cd $env:TEMP
        git clone --depth 1 --branch 2.2.2 https://github.com/zlib-ng/zlib-ng.git
        cd zlib-ng
        mkdir build
        cd build
        cmake .. -G "${{ matrix.config.generators }}" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DZLIB_COMPAT=OFF -DZLIB_ENABLE_TESTS=OFF -DCMAKE_INSTALL_PREFIX="C:/Program Files/ZLIBNG"
        cmake --build . --config Release
        cmake --install . --config Release
        Write-Host "zlib-ng installed to: C:/Program Files/ZLIBNG"
        cd $env:GITHUB_WORKSPACE
      shell: powershell
    
    - name: Build and install minizip-ng (Windows)
      if: startsWith(matrix.config.os, 'windows')
      run: |
        Write-Host "=== Building minizip-ng ==="
        cd $env:TEMP
        git clone --depth 1 --branch 4.0.7 https://github.com/zlib-ng/minizip-ng.git
        cd minizip-ng
        mkdir build
        cd build
        # Try to find OpenSSL in common locations
        $opensslPath = if (Test-Path "C:/Program Files/OpenSSL-Win64") { "C:/Program Files/OpenSSL-Win64" } 
                       elseif (Test-Path "C:/Program Files/OpenSSL") { "C:/Program Files/OpenSSL" }
                       else { "C:/Program Files/OpenSSL" }
        $zlibngPath = "C:/Program Files/ZLIBNG"
        Write-Host "OpenSSL path: $opensslPath"
        Write-Host "ZLIBNG path: $zlibngPath"
        cmake .. -G "${{ matrix.config.generators }}" -DCMAKE_BUILD_TYPE=Release -DMZ_COMPAT=OFF -DMZ_FETCH_LIBS=OFF -DMZ_ZLIB=ON -DMZ_BZIP2=OFF -DMZ_LZMA=OFF -DMZ_ZSTD=OFF -DMZ_OPENSSL=ON -DCMAKE_PREFIX_PATH="$zlibngPath;$opensslPath"
        cmake --build . --config Release
        cmake --install . --config Release
        Write-Host "minizip-ng installed"
        cd $env:GITHUB_WORKSPACE
      shell: powershell

    - name: Configure CMake (Windows)
      if: startsWith(matrix.config.os, 'windows')
      run: |
        # Try to find OpenSSL in common locations
        $opensslPath = if (Test-Path "C:/Program Files/OpenSSL-Win64") { "C:/Program Files/OpenSSL-Win64" } 
                       elseif (Test-Path "C:/Program Files/OpenSSL") { "C:/Program Files/OpenSSL" }
                       else { "C:/Program Files/OpenSSL" }
        $prefixPath = "C:/Program Files/ZLIBNG;$opensslPath;C:/Program Files (x86)/minizip-ng"
        Write-Host "=== Configuring NekoFunction ==="
        Write-Host "CMAKE_PREFIX_PATH: $prefixPath"
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -G "${{ matrix.config.generators }}" -DNEKO_BUILD_TESTS=ON -DNEKO_AUTO_FETCH_DEPS=ON -DCMAKE_PREFIX_PATH="$prefixPath"
      shell: powershell

    - name: Configure CMake (Unix)
      if: "!startsWith(matrix.config.os, 'windows')"
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} -G "${{ matrix.config.generators }}" -DNEKO_BUILD_TESTS=ON -DNEKO_AUTO_FETCH_DEPS=ON
      shell: bash

    - name: Verify Hash and Archive Support
      run: |
        echo "=== NekoFunction Configuration Check ==="
        if grep -q "Hash support enabled: ON" build/CMakeCache.txt 2>/dev/null || grep -rq "Hash support enabled: ON" build/ 2>/dev/null; then
          echo "✓ Hash support is ENABLED"
        else
          echo "✗ Hash support is DISABLED or not found"
        fi
        if grep -q "Archiver support enabled: ON" build/CMakeCache.txt 2>/dev/null || grep -rq "Archiver support enabled: ON" build/ 2>/dev/null; then
          echo "✓ Archiver support is ENABLED"
        else
          echo "✗ Archiver support is DISABLED or not found"
        fi
      shell: bash

    - name: Build
      run: cmake --build build --config ${{ matrix.config.build_type }} --parallel

    - name: Run tests
      working-directory: build
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          if [ "${{ matrix.config.generators }}" = "Visual Studio 17 2022" ] || [ "${{ matrix.config.generators }}" = "Visual Studio 16 2019" ]; then
            ctest -C ${{ matrix.config.build_type }} --output-on-failure --verbose
          else
            ctest --output-on-failure --verbose
          fi
        else
          ctest --output-on-failure --verbose
        fi
      shell: bash

    - name: Upload build artifacts (on failure)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.config.name }}
        path: |
          build/CMakeFiles/CMakeOutput.log
          build/CMakeFiles/CMakeError.log
          build/Testing/Temporary/LastTest.log